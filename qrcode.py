import cv2
import numpy as np
from scipy.misc import imsave
import zbar
import cv2
from PIL import Image

qr=[[1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1],\
    [1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1],\
    [1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1],\
    [1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1],\
    [1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1],\
    [1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1],\
    [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],\
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\
    [1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0],\
    [0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0],\
    [0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1],\
    [0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1],\
    [0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1],\
    [0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],\
    [0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1],\
    [0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0],\
    [0,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1],\
    [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0],\
    [1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,1],\
    [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1],\
    [1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0],\
    [1,0,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1],\
    [1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1],\
    [1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1],\
    [1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1]
        ]

p1=[[0,0,1,1,0],\
    [1,1,0,0,1],\
    [1,0,0,1,1],\
    [0,0,1,0,1],\
    [0,1,1,0,1]
        ]

p2=[[0,0,1,0,0],\
    [0,1,1,0,1],\
    [0,1,1,1,1],\
    [0,0,0,1,1],\
    [0,1,0,1,0]
        ]

p3=[[1,0,1,1,0],\
    [0,0,1,0,1],\
    [0,1,0,1,1],\
    [1,0,1,1,1],\
    [1,0,0,1,0]
        ]

p4=[[0,0,1,1,1],\
    [1,1,1,0,1],\
    [1,1,0,1,0],\
    [0,0,0,1,0],\
    [1,1,0,0,0]
        ]

def changesize(tmp):
    l=[([255]*270) for i in range(270)]
    i=1
    while i<26:
        j=1
        while j<26:
            for x in range(10):
                for y in range(10):
                    if tmp[i-1][j-1]==1:
                        l[(i)*10+x][(j)*10+y]=0
                    else:
                        l[(i)*10+x][(j)*10+y]=255
            j+=1
        i+=1
    l=np.array(l)
    cv2.imwrite("ab.jpg",l)

def printData():
    print 2
    scanner=zbar.ImageScanner()
    scanner.parse_config("enable")
    img=Image.open("ab.jpg").convert("L")
    width,height=img.size
    q=zbar.Image(width,height,'Y800',img.tobytes())
    scanner.scan(q)
    data=''
    for s in q:
        data+=s.data
    del img
    print data

def qrcode(qr,p1,p2,p3,p4):
    while True:
        for i1 in range(4):
            if p3[4][3]==1 and p3[4][4]==0 and p3[3][4]==1 and p3[3][3]==1:# p2 p3   4
                print ("i1:%d",i1)
                for i2 in range(2):
                    if p4[0][0]==0 and p4[0][1]==0 and p4[1][0]==1: #p1,p2,p4  1
                        print ("i2:%d",i2)
                        for i3 in range(4):
                            if p1[0][4]==0 and p1[1][4]==p4[1][1]:   #2
                                print ("i3:%d",i3)
                                for i4 in range(4):
                                    if p2[4][0]==0:    #3
                                        print ("i4:%d",i4)
                                        for x in range(5):
                                            qr[13+x][13:18]=p3[x]  #4
                                            qr[7+x][7:12]=p4[x]    #1
                                            qr[7+x][13:18]=p1[x]   #2
                                            qr[13+x][7:12]=p2[x]    #3
                                        tmp=qr[:][:]
                                        changesize(tmp)
                                        printData()
                                    p2=map(lambda x:x[::-1],zip(*p2))
                            p1=map(lambda x:x[::-1],zip(*p1))
                    p4=map(lambda x:x[::-1],zip(*p4))
            p3=map(lambda x:x[::-1],zip(*p3))
        break

qrcode(qr,p1,p2,p3,p4)
#printData()
